syntax = "proto3";

package api.user_v1;

option go_package = "github.com/iamtonydev/user-service-api/pkg/user_v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

service UserV1 {
  rpc AddUser (AddUserRequest) returns (AddUserResponse) {
    option (google.api.http) = {
      post: "/user/v1/add"
      body: "*"
    };
  }
  rpc GetUser (GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/user/v1/get/{id}"
    };
  }
  rpc MultiAddUser (MultiAddUserRequest) returns (MultiAddUserResponse) {
    option (google.api.http) = {
      post: "/user/v1/multi-add"
      body: "*"
    };
  }
  rpc ListUser (google.protobuf.Empty) returns (ListUserResponse) {
    option (google.api.http) = {
      get: "/user/v1/list"
    };
  }
  rpc RemoveUser (RemoveUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/v1/delete/{id}"
    };
  }
  rpc UpdateUser (UpdateUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user/v1/update"
      body: "*"
    };
  }
}

message AddUserRequest {
  string name = 1 [json_name = "name", (validate.rules).string = {min_len: 1, max_len: 20}];
  int64 age = 2 [json_name = "age", (validate.rules).int64.gte = 18];
  string email = 3 [json_name = "email", (validate.rules).string.email = true];
}

message AddUserResponse {
  message Result {
    int64 id = 1;
  }

  Result result = 1;
}

message GetUserRequest {
  int64 id = 1 [json_name = "id", (validate.rules).int64.gt = 0];
}

message GetUserResponse {
  message User {
    int64 id = 1;
    string name = 2;
    int64 age = 3;
    string email = 4;
  }

  User result = 1;
}

message MultiAddUserRequest {
  message User {
    string name = 1 [json_name = "name", (validate.rules).string = {min_len: 1, max_len: 20}];
    int64 age = 2 [json_name = "age", (validate.rules).int64.gte = 18];
    string email = 3 [json_name = "email", (validate.rules).string.email = true];
  }

  repeated User users = 1;
}

message MultiAddUserResponse {
  message Result {
    int64 count = 1;
  }

  Result result = 1;
}

message ListUserResponse {
  message Result {
    message User {
      int64 id = 1;
      string name = 2;
      int64 age = 3;
      string email = 4;
    }

    repeated User users = 1;
  }

  Result result = 1;
}

message RemoveUserRequest {
  int64 id = 1 [json_name = "id", (validate.rules).int64.gt = 0];
}

message UpdateUserRequest {
  int64 id = 1 [json_name = "id", (validate.rules).int64.gt = 0];
  string name = 2 [json_name = "name", (validate.rules).string = {min_len: 1, max_len: 20}];
  int64 age = 3 [json_name = "age", (validate.rules).int64.gte = 18];
  string email = 4 [json_name = "email", (validate.rules).string.email = true];
}